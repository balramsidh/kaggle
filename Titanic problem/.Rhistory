df.combined$Date <- as.Date(as.yearmon(paste(df.tourists$Month[13:len], df.tourists$Year[13:len], sep=" ")))
df.combined$Month <- factor(df.combined$Month, levels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
str(df.combined)
x=list.files(pattern="(multi).*\\.csv")
x[1]
for (i in 1: length(x)) {
assign(x[i], read.csv(x[i], skip=1, header = T))
temp_name <- gsub("\\..*", "\\1", colnames(get(x[i]))[2] )
df.combined[temp_name] <- get(x[i])[2]
}
View(df.combined)
View(`multiTimeline (1).csv`)
write.csv(df.combined, file = "finalfile.csv")
View(df.combined)
View(df.combined)
x[2]
View(`multiTimeline (1).csv`)
View(`multiTimeline (1).csv`)
View(multiTimeline.csv)
View(multiTimeline.csv)
gsub("\\.\\..*", "\\1", colnames(get(x[2]))[2] )
gsub("\\.\\..*", "\\1", colnames(get(x[1]))[2] )
rm(df.combined)
df.tourists$Month <- paste(substr(df.tourists$Month,1,1),tolower(substr(df.tourists$Month,2,3)), sep = "")  # to convert JAN to Jan
len <- length(df.tourists$Visitors)
df.combined <- cbind.data.frame(Year= df.tourists$Year[13:len], Month=df.tourists$Month[13:len],V=df.tourists$Visitors[13:len], lastmonthV=df.tourists$Visitors[12:(len -1)], lastyearV=df.tourists$Visitors[1:(len-12)] )
# converting to date format
df.combined$Date <- as.Date(as.yearmon(paste(df.tourists$Month[13:len], df.tourists$Year[13:len], sep=" ")))
# This is to ensure the sequence is not by alphabet but by months of the year
df.combined$Month <- factor(df.combined$Month, levels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
str(df.combined)
# Adding the google trend data to our data file
x=list.files(pattern="(multi).*\\.csv") # list of all the csv files in current dir with "multi" in name
# for loop is basically to 1. read all files in variable x 2. get names of second column 3. add that column to main file
for (i in 1: length(x)) {
assign(x[i], read.csv(x[i], skip=1, header = T))
temp_name <- gsub("\\.\\..*", "\\1", colnames(get(x[i]))[2] )
df.combined[temp_name] <- get(x[i])[2]
}
View(df.combined)
View(multiTimeline.csv)
write.csv(df.combined, file = "finalfile.csv")
temp.name
temp_name
df.combined[temp_name]
df.combined[temp_name] <- null
df.combined[temp_name] <- NULL
df.combined[temp_name]
View(df.combined)
df.combined[trend.temp_name] <- get(x[1])[2]
paste("Trend",gsub("\\.\\..*", "\\1", colnames(get(x[1]))[2] ), sep=".")
paste("Trend",gsub("\\.\\..*", "\\1", colnames(get(x[2]))[2] ), sep=".")
rm(df.combined)
df.tourists$Month <- paste(substr(df.tourists$Month,1,1),tolower(substr(df.tourists$Month,2,3)), sep = "")  # to convert JAN to Jan
len <- length(df.tourists$Visitors)
df.combined <- cbind.data.frame(Year= df.tourists$Year[13:len], Month=df.tourists$Month[13:len],V=df.tourists$Visitors[13:len], lastmonthV=df.tourists$Visitors[12:(len -1)], lastyearV=df.tourists$Visitors[1:(len-12)] )
# converting to date format
df.combined$Date <- as.Date(as.yearmon(paste(df.tourists$Month[13:len], df.tourists$Year[13:len], sep=" ")))
# This is to ensure the sequence is not by alphabet but by months of the year
df.combined$Month <- factor(df.combined$Month, levels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
str(df.combined)
# Adding the google trend data to our data file
x=list.files(pattern="(multi).*\\.csv") # list of all the csv files in current dir with "multi" in name
# for loop is basically to 1. read all files in variable x 2. get names of second column 3. add that column to main file
for (i in 1: length(x)) {
assign(x[i], read.csv(x[i], skip=1, header = T))
temp_name <- paste("Trend",gsub("\\.\\..*", "\\1", colnames(get(x[i]))[2] ), sep=".")
df.combined[trend.temp_name] <- get(x[i])[2]
}
# Writing a final csv file
write.csv(df.combined, file = "finalfile.csv")
rm(df.combined)
df.tourists$Month <- paste(substr(df.tourists$Month,1,1),tolower(substr(df.tourists$Month,2,3)), sep = "")  # to convert JAN to Jan
len <- length(df.tourists$Visitors)
df.combined <- cbind.data.frame(Year= df.tourists$Year[13:len], Month=df.tourists$Month[13:len],V=df.tourists$Visitors[13:len], lastmonthV=df.tourists$Visitors[12:(len -1)], lastyearV=df.tourists$Visitors[1:(len-12)] )
# converting to date format
df.combined$Date <- as.Date(as.yearmon(paste(df.tourists$Month[13:len], df.tourists$Year[13:len], sep=" ")))
# This is to ensure the sequence is not by alphabet but by months of the year
df.combined$Month <- factor(df.combined$Month, levels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
str(df.combined)
# Adding the google trend data to our data file
x=list.files(pattern="(multi).*\\.csv") # list of all the csv files in current dir with "multi" in name
# for loop is basically to 1. read all files in variable x 2. get names of second column 3. add that column to main file
for (i in 1: length(x)) {
assign(x[i], read.csv(x[i], skip=1, header = T))
temp_name <- paste("Trend",gsub("\\.\\..*", "\\1", colnames(get(x[i]))[2] ), sep=".")
df.combined[temp_name] <- get(x[i])[2]
}
# Writing a final csv file
write.csv(df.combined, file = "finalfile.csv")
View(df.combined)
View(df.combined)
rm(df.combined)
df.tourists$Month <- paste(substr(df.tourists$Month,1,1),tolower(substr(df.tourists$Month,2,3)), sep = "")  # to convert JAN to Jan
len <- length(df.tourists$Visitors)
df.combined$Date <- as.Date(as.yearmon(paste(df.tourists$Month[13:len], df.tourists$Year[13:len], sep=" ")))
# Loading the csv file
rm(df.tourists)
df.tourists <- read.csv("HongKongTourists.csv")
# Data manipulation
rm(df.combined)
df.tourists$Month <- paste(substr(df.tourists$Month,1,1),tolower(substr(df.tourists$Month,2,3)), sep = "")  # to convert JAN to Jan
len <- length(df.tourists$Visitors)
df.combined <- cbind.data.frame(Year= df.tourists$Year[13:len], Month=df.tourists$Month[13:len],V=df.tourists$Visitors[13:len], lastmonthV=df.tourists$Visitors[12:(len -1)], lastyearV=df.tourists$Visitors[1:(len-12)] )
# This is to ensure the sequence is not by alphabet but by months of the year
df.combined$Month <- factor(df.combined$Month, levels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
str(df.combined)
# Adding the google trend data to our data file
x=list.files(pattern="(multi).*\\.csv") # list of all the csv files in current dir with "multi" in name
# for loop is basically to 1. read all files in variable x 2. get names of second column 3. add that column to main file
for (i in 1: length(x)) {
assign(x[i], read.csv(x[i], skip=1, header = T))
temp_name <- paste("Trend",gsub("\\.\\..*", "\\1", colnames(get(x[i]))[2] ), sep=".")
df.combined[temp_name] <- get(x[i])[2]
}
# Writing a final csv file
write.csv(df.combined, file = "finalfile.csv")
View(df.combined)
View(df.combined)
df.train <- df.combined[(df.combined$Year != "2017"),]
View(df.train)
df.test <- df.combined[(df.combined$Year = "2017"),]
View(df.test)
View(df.test)
df.test <- df.combined[(df.combined$Year == "2017"),]
View(df.test)
rm(df.test)
df.test <- df.combined[(df.combined$Year == "2017"),]
View(df.combined)
View(df.test)
View(df.train)
rm(df.tourists)
df.tourists <- read.csv("HongKongTourists.csv")
# Data manipulation
rm(df.combined)
df.tourists$Month <- paste(substr(df.tourists$Month,1,1),tolower(substr(df.tourists$Month,2,3)), sep = "")  # to convert JAN to Jan
len <- length(df.tourists$Visitors)
df.combined <- cbind.data.frame(Year= df.tourists$Year[13:len], Month=df.tourists$Month[13:len],V=df.tourists$Visitors[13:len], lastmonthV=df.tourists$Visitors[12:(len -1)], lastyearV=df.tourists$Visitors[1:(len-12)] )
# converting to date format
df.combined$Date <- as.Date(as.yearmon(paste(df.tourists$Month[13:len], df.tourists$Year[13:len], sep=" ")))
# This is to ensure the sequence is not by alphabet but by months of the year
df.combined$Month <- factor(df.combined$Month, levels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
str(df.combined)
# Adding the google trend data to our data file
x=list.files(pattern="(multi).*\\.csv") # list of all the csv files in current dir with "multi" in name
# for loop is basically to 1. read all files in variable x 2. get names of second column 3. add that column to main file
for (i in 1: length(x)) {
assign(x[i], read.csv(x[i], skip=1, header = T))
temp_name <- paste("Trend",gsub("\\.\\..*", "\\1", colnames(get(x[i]))[2] ), sep=".")
df.combined[temp_name] <- get(x[i])[2]
}
# Writing a final csv file
write.csv(df.combined, file = "finalfile.csv")
View(df.combined)
df.test <- df.combined[(df.combined$Year == "2017"),]
View(df.test)
df.train <- df.combined[(df.combined$Year != "2017"),]
View(df.train)
View(df.train)
attach(df.train)
?lm()
model1 <- lm(V ~ lastyearV + lastmonthV)
model1
summary(model1)
model1 <- lm(V ~ lastyearV )
summary(model1)
?mspe
predict(df.test,model1)
?predict
predict(model1,df.test)
View(df.test)
(test$V - predict(model1,df.test)
?predict
# Visualization
library('ggplot2')
ggplot(df.combined,aes(x=Month, y=V)) +
theme_bw() +
geom_bar(stat="identity", aes(fill=Year)) +
labs(y = "Volume", title="Volume of Tourists by Month")
ggplot(df.combined,aes(x=Year, y=V)) +
theme_bw() +
geom_bar(stat="identity", aes(fill=Month)) +
labs(y = "Volume", title="Volume of Tourists by Month")
ggplot(df.combined, aes(x=V,y=TrendW)) +
theme_bw() +
geom_point() +
geom_smooth(method="lm")
library(scales)
ggplot(df.combined, aes(x=Date)) +
theme_bw() +
geom_line(aes(y=V, colour="V", group=1)) +
geom_line(aes(y=lastyearV, colour="lastyearV", group=1)) +
labs(x="Date", y="Volume", title="Year on Year comparision") +
theme(aspect.ratio = 1/2, legend.position = "top") +
scale_x_date(labels = date_format("%y"), breaks = date_breaks("years"))
str(df.combined)
ggplot(aggregate(V ~ Month , data=df.combined, FUN=median),aes(Month,V, color=(Month))) +
geom_point()
aggregate(V ~  Month, data=df.combined, FUN=mean)
test$V - predict(model1,df.test)
df.test$V - predict(model1,df.test)
sum((df.test$V - predict(model1,df.test))^2)
predict(model1,df.test
sum((df.test$V - predict(model1,df.test))^2)
?predict
# Visualization
library('ggplot2')
ggplot(df.combined,aes(x=Month, y=V)) +
theme_bw() +
geom_bar(stat="identity", aes(fill=Year)) +
labs(y = "Volume", title="Volume of Tourists by Month")
ggplot(df.combined,aes(x=Year, y=V)) +
theme_bw() +
geom_bar(stat="identity", aes(fill=Month)) +
labs(y = "Volume", title="Volume of Tourists by Month")
ggplot(df.combined, aes(x=V,y=TrendW)) +
theme_bw() +
geom_point() +
geom_smooth(method="lm")
predict(model1,df.test)
sum((df.test$V - predict(model1,df.test))^2)
df.test$V - predict(model1,df.test
sum((df.test$V - predict(model1,df.test))^2)
?predict
# Visualization
library('ggplot2')
ggplot(df.combined,aes(x=Month, y=V)) +
theme_bw() +
geom_bar(stat="identity", aes(fill=Year)) +
labs(y = "Volume", title="Volume of Tourists by Month")
ggplot(df.combined,aes(x=Year, y=V)) +
theme_bw() +
geom_bar(stat="identity", aes(fill=Month)) +
labs(y = "Volume", title="Volume of Tourists by Month")
ggplot(df.combined, aes(x=V,y=TrendW)) +
theme_bw() +
geom_point() +
geom_smooth(method="lm")
library(scales)
ggplot(df.combined, aes(x=Date)) +
theme_bw() +
geom_line(aes(y=V, colour="V", group=1)) +
geom_line(aes(y=lastyearV, colour="lastyearV", group=1)) +
labs(x="Date", y="Volume", title="Year on Year comparision") +
theme(aspect.ratio = 1/2, legend.position = "top") +
scale_x_date(labels = date_format("%y"), breaks = date_breaks("years"))
str(df.combined)
ggplot(aggregate(V ~ Month , data=df.combined, FUN=median),aes(Month,V, color=(Month))) +
geom_point()
aggregate(V ~  Month, data=df.combined, FUN=mean)
predict(model1,df.test)
df.test$V - predict(model1,df.test)
sum((df.test$V - predict(model1,df.test))^2)
df.test$V
predict(model1,df.test)
df.test$V - predict(model1,df.test)
sum((df.test$V - predict(model1,df.test))^2)
summary(model1)
grep((lm),summary(model1))
model1
model1 %<% grep((lm))
require(dplyr)
model1 %<% grep((lm))
model1 %>% grep((lm))
as.character(model1)
summary(model1)
as.character(summary(model1))
as.character(summary(model1)) %>% grep(lm)
grep((lm),as.character(summary(model1)) )
as.character(summary(model1))[1]
model_name_1 <- c("V ~ lastyearV + lastmonthV")
model1 <- lm(V ~ lastyearV + lastmonthV )
df.test$V
predict(model1,df.test)
df.test$V - predict(model1,df.test)
square_error_1 <- sum((df.test$V - predict(model1,df.test))^2)
square_error_1
model_name_1 <- c("V ~ lastmonthV")
model1 <- lm(v ~ lastmonthV)
model_name_2 <- c("V ~ lastyearV + lastmonthV")
model2 <- lm(V ~ lastyearV + lastmonthV )
b=1
model_name_[b]
model_name_(b)
model_name_b
model_name_`b`
model_name_get(b)
square_error_1 <- sum((df.test$V - predict(model1,df.test))^2)
square_error_1
square_error_2 <- sum((df.test$V - predict(model2,df.test))^2)
square_error_2
model_name_1 <- c("V ~ lastmonthV")
model1 <- lm(v ~ lastmonthV)
model1 <- lm(V ~ lastmonthV)
model_name_2 <- c("V ~ lastyearV + lastmonthV")
model2 <- lm(V ~ lastyearV + lastmonthV )
square_error_1 <- sum((df.test$V - predict(model1,df.test))^2)
square_error_2 <- sum((df.test$V - predict(model2,df.test))^2)
square_error_2
square_error_1
y <- step(model1, direction = "forward", scope=(~ lastyearV + Trend.places.to.visit + Trend.Tourism))
y <- step(model1, direction = "forward", scope=(~ lsatmonthV + lastyearV + Trend.places.to.visit + Trend.Tourism))
y
y <- step(model1, direction = "forward", scope=(~ lastmonthV + lastyearV + Trend.places.to.visit + Trend.Tourism))
y
summary(y)
ggplot(df.combined, aes(x=V,y=Trend.Tourism)) +
theme_bw() +
geom_point() +
geom_smooth(method="lm")
ggplot(df.combined, aes(x=log(V),y=Trend.Tourism)) +
theme_bw() +
geom_point() +
geom_smooth(method="lm")
ggplot(df.combined, aes(x=V,y=Trend.Tourism)) +
theme_bw() +
geom_point() +
geom_smooth(method="lm")
ggplot(df.combined, aes(x=V,y=Trend.places.to.visit)) +
theme_bw() +
geom_point() +
geom_smooth(method="lm")
ggplot(df.combined,aes(x=Month, y=V)) +
theme_bw() +
geom_bar(stat="identity", aes(fill=Year)) +
labs(y = "Volume", title="Volume of Tourists by Month")
ggplot(df.combined,aes(x=Year, y=V)) +
theme_bw() +
geom_bar(stat="identity", aes(fill=Month)) +
labs(y = "Volume", title="Volume of Tourists by Month")
ggplot(df.combined, aes(x=V,y=Trend.places.to.visit)) +
theme_bw() +
geom_point() +
geom_smooth(method="lm")
ggplot(df.combined, aes(x=Date)) +
theme_bw() +
geom_line(aes(y=V, colour="V", group=1)) +
geom_line(aes(y=lastyearV, colour="lastyearV", group=1)) +
labs(x="Date", y="Volume", title="Year on Year comparision") +
theme(aspect.ratio = 1/2, legend.position = "top") +
scale_x_date(labels = date_format("%y"), breaks = date_breaks("years"))
ggplot(aggregate(V ~ Month , data=df.combined, FUN=median),aes(Month,V, color=(Month))) +
geom_point()
c <- data.frame(list(kids,ages))
c <- data.frame(model_name=character(),square_error=double())
c
df.output <- data.frame(model_name=character(),square_error=double())
df.output[1,1] <- c("V ~ lastmonthV")
View(df.output)
df.combined[1,1
]
df.combined[1,2]
df.output <- data.frame(model_name=character(),square_error=double(), stringsAsFactors = FALSE)
df.output[1,1] <- c("V ~ lastmonthV")
View(df.output)
model1 <- lm(V ~ lastmonthV, data=df.train)
df.output$square_error[1] <- sum((df.test$V - predict(model1,df.test))^2)
df.output$model_name[2] <- c("V ~ lastyearV + lastmonthV")
View(df.output)
df.output[2,1] <- c("V ~ lastyearV + lastmonthV")
model2 <- lm(V ~ lastyearV + lastmonthV, data=df.train )
df.output$square_error[2] <- sum((df.test$V - predict(model2,df.test))^2)
x
setwd("~/Desktop/R/521 Team Project")
rm(df.tourists)
df.tourists <- read.csv("HongKongTourists.csv")
rm(df.combined)
df.tourists$Month <- paste(substr(df.tourists$Month,1,1),tolower(substr(df.tourists$Month,2,3)), sep = "")  # to convert JAN to Jan
len <- length(df.tourists$Visitors)
df.combined <- cbind.data.frame(Year= df.tourists$Year[13:len], Month=df.tourists$Month[13:len],V=df.tourists$Visitors[13:len], lastmonthV=df.tourists$Visitors[12:(len -1)], lastyearV=df.tourists$Visitors[1:(len-12)] )
df.combined$Date <- as.Date(as.yearmon(paste(df.tourists$Month[13:len], df.tourists$Year[13:len], sep=" ")))
df.combined$Month <- factor(df.combined$Month, levels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
str(df.combined)
x=list.files(pattern="(multi).*\\.csv") # list of all the csv files in current dir with "multi" in name
for (i in 1: length(x)) {
assign(x[i], read.csv(x[i], skip=1, header = T))
temp_name <- paste("Trend",gsub("\\.\\..*", "\\1", colnames(get(x[i]))[2] ), sep=".")
df.combined[temp_name] <- get(x[i])[2]
}
write.csv(df.combined, file = "finalinput.csv")
rm(df.combined)
df.tourists$Month <- paste(substr(df.tourists$Month,1,1),tolower(substr(df.tourists$Month,2,3)), sep = "")  # to convert JAN to Jan
len <- length(df.tourists$Visitors)
df.combined <- cbind.data.frame(Year= df.tourists$Year[13:len], Month=df.tourists$Month[13:len],V=df.tourists$Visitors[13:len], lastmonthV=df.tourists$Visitors[12:(len -1)], lastyearV=df.tourists$Visitors[1:(len-12)] )
df.combined$Date <- as.Date(as.yearmon(paste(df.tourists$Month[13:len], df.tourists$Year[13:len], sep=" ")))
str(df.combined)
df.combined$Month <- factor(df.combined$Month, levels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
str(df.combined)
gsub("\\.\\..*", "\\1", colnames(get(x[1]))[2] )
gsub("\\\\..*", "\\1", colnames(get(x[1]))[2] )
gsub("\\.\\..*", "\\1", colnames(get(x[1]))[2] )
?`regular expression`
?gsub()
gsub(".\\..*", "\\1", colnames(get(x[1]))[2] )
gsub("\\..*", "\\1", colnames(get(x[1]))[2] )
gsub("\\..*", "\\1", colnames(get(x[1]))[2] )
View(df.combined)
for (i in 1: length(x)) {
assign(x[i], read.csv(x[i], skip=1, header = T))
temp_name <- paste("Trend",gsub("\\..*", "\\1", colnames(get(x[i]))[2] ), sep=".")
df.combined[temp_name] <- get(x[i])[2]
}
View(df.combined)
gsub("\\..*", "\\2", colnames(get(x[i]))[2] )
gsub("\\..*", "\\2", colnames(get(x[1]))[2] )
gsub("\\..*", "\\2", colnames(get(x[1]))[2] )
gsub("\\..*", "\\3", colnames(get(x[1]))[2] )
gsub("\\..*", "\\4", colnames(get(x[1]))[2] )
gsub("\\..*", "\\6", colnames(get(x[1]))[2] )
gsub("\\..*", "\\1", colnames(get(x[1]))[2] )
gsub("\\..*", "\\1", colnames(get(x[2]))[2] )
gsub("\\.\\..*", "\\1", colnames(get(x[2]))[2] )
gsub("\\.\\..*", "\\1", colnames(get(x[2]))[2] )
gsub("\\.\\...*", "\\1", colnames(get(x[2]))[2] )
gsub("\\.\\.*", "\\1", colnames(get(x[2]))[2] )
gsub("\\.\\..*", "\\1", colnames(get(x[2]))[2] )
gsub("\\.\\..*", "\\1", colnames(get(x[1]))[2] )
colnames(get(x[1]))[2]
x
str(x)
class(x)
typeof(x)
i=1
colnames(get(x[i]))[2]
colnames((x[i]))[2]
[2]
colnames(get(x[1]))[2]
x
ggplot(df.combined,aes(x=Month, y=V)) +
theme_bw() +
geom_bar(stat="identity", aes(fill=Year)) +
labs(y = "Volume", title="Volume of Tourists by Month")
ggplot(df.combined,aes(x=Year, y=V)) +
theme_bw() +
geom_bar(stat="identity", aes(fill=Month)) +
labs(y = "Volume", title="Volume of Tourists by Month")
ggplot(df.combined, aes(x=Date)) +
theme_bw() +
geom_line(aes(y=V, colour="V", group=1)) +
geom_line(aes(y=lastyearV, colour="lastyearV", group=1)) +
labs(x="Date", y="Volume", title="Year on Year comparision") +
theme(aspect.ratio = 1/2, legend.position = "top") +
scale_x_date(labels = date_format("%y"), breaks = date_breaks("years"))
aggregate(V ~  Month, data=df.combined, FUN=mean)
ggplot(aggregate(V ~ Month , data=df.combined, FUN=median),aes(Month,V, color=(Month))) +
geom_point()
gsub("\\.\\..*", "\\1", colnames(get(x[1]))[2] )
gsub("\\.\\..*", "\\1", colnames(get(x[2]))[2] )
rm(df.combined)
df.tourists$Month <- paste(substr(df.tourists$Month,1,1),tolower(substr(df.tourists$Month,2,3)), sep = "")  # to convert JAN to Jan
len <- length(df.tourists$Visitors)
df.combined <- cbind.data.frame(Year= df.tourists$Year[13:len], Month=df.tourists$Month[13:len],V=df.tourists$Visitors[13:len], lastmonthV=df.tourists$Visitors[12:(len -1)], lastyearV=df.tourists$Visitors[1:(len-12)] )
View(df.combined)
df.combined$Date <- as.Date(as.yearmon(paste(df.tourists$Month[13:len], df.tourists$Year[13:len], sep=" ")))
str(df.combined)
df.combined$Month <- factor(df.combined$Month, levels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"))
str(df.combined)
x=list.files(pattern="(multi).*\\.csv") # list of all the csv files in current dir with "multi" in name
x
for (i in 1: length(x)) {
assign(x[i], read.csv(x[i], skip=1, header = T))
temp_name <- paste("Trend",gsub("\\.\\..*", "\\1", colnames(get(x[i]))[2] ), sep=".")
df.combined[temp_name] <- get(x[i])[2]
}
View(df.combined)
View(multiTimeline.csv)
View(`multiTimeline (1).csv`)
write.csv(df.combined, file = "finalinput.csv")
df.test <- df.combined[(df.combined$Year == "2017"),]
df.train <- df.combined[(df.combined$Year != "2017"),]
df.output <- data.frame(model_name=character(),square_error=double(), stringsAsFactors = FALSE)
df.output$model_name[1] <- c("V ~ lastmonthV")
model1 <- lm(V ~ lastmonthV, data=df.train)
summary(model1)
df.output$square_error[1] <- sum((df.test$V - predict(model1,df.test))^2)
df.output[2,1] <- c("V ~ lastyearV + lastmonthV")
model2 <- lm(V ~ lastyearV + lastmonthV, data=df.train )
summary(model2)
View(df.combined)
View(multiTimeline.csv)
summary(model1)
# The table command is one of the most basic summary statistics functions in R, it runs through the vector you gave it and simply counts the occurrence of each value in it.
table(train$Survived)
setwd("~/Desktop/Kaggle/Titanic problem")
library(readr)
train <- read.csv("train.csv", stringsAsFactors = TRUE)
test <- read.csv("test.csv", stringsAsFactors = TRUE)
# To check the structure of columns
str(train)
# The table command is one of the most basic summary statistics functions in R, it runs through the vector you gave it and simply counts the occurrence of each value in it.
table(train$Survived)
# To get the proportion
prop.table(table(train$Survived))
library(rattle)
library(rpart.plot)
fancyRpartPlot(fit)
library(rpart)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method="class")
summary(fit)
plot(fit)
text(fit)
fancyRpartPlot(fit)
#You can find the default limits by typing ?rpart.control. The first one we want to unleash is the cp parameter, this is the metric that stops splits that aren’t deemed important enough. The other one we want to open up is minsplit which governs how many passengers must sit in a bucket before even looking for a split. Let’s max both out and reduce cp to zero and minsplit to 2 (no split would obviously be possible for a single passenger in a bucket):
# to more fine grain the results
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data=train,
method="class",
control=rpart.control(minsplit=2, cp=0))
fancyRpartPlot(fit)
View(df.output)
View(df.combined)
View(train)
