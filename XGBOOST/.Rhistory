packages = c("xgboost","tidyverse")
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
## reading the input file
diseaseInfo <-read.csv("Outbreak_240817.csv")
# testing and training using sampling
set.seed(1234)
diseaseInfo <- diseaseInfo[sample(1:nrow(diseaseInfo)),]
## removing infro about target variable
diseaseInfo_humansRemoved <- diseaseInfo %>%
select(-starts_with("human"))
## getting labels
diseaseLabels <- diseaseInfo %>%
select(humansAffected) %>%  # to get column with # of humans affected
is.na() %>% # check if na
magrittr::not() # reverse the result of is.na, ie: false means: humans are affected but i need to change it to True.
# reduce the redundant information
# removing id, long lat(as country is already there), removing any non numeric features
diseaseInfo_numeric <- diseaseInfo_humansRemoved %>%
select(-Id) %>%
select(-c(longitude,latitude)) %>%
select_if(is.numeric)
# converting categorial to numeric
# one hot encoding for country
region <- model.matrix(~country-1,diseaseInfo)
# for species description
summary(diseaseInfo$speciesDescription)
diseaseInfo_numeric$is_domestic <- str_detect(diseaseInfo$speciesDescription,"domestic")
# now we are checking for species type which is stored in second str of species description
speciesList <-   diseaseInfo$speciesDescription %>%
str_replace("[[:punct:]]","") %>% # replacing any punctuation
str_extract("[a-z]*$") # getting just the last word
speciesList <- tibble(species = speciesList) # converting into dataframe
# one hot encoding for speciesList
options(na.action = 'na.pass') # dont ignore na
species <- model.matrix(~species-1,speciesList)
#########
# combining diseaseinfor numeric, region and species together
diseaseInfo_numeric <- cbind(diseaseInfo_numeric,region,species)
# converting into matrix as xgboost only works with matrix
diseaseInfo_matrix <- data.matrix(diseaseInfo_numeric)
######### test and train ######
# next step is to convert into test(30%) and train data(70%)
train_len <- round(nrow(diseaseInfo_matrix)*0.7)
# training data
train_data <- diseaseInfo_matrix[1:train_len,]
train_lables <- diseaseLabels[1:train_len,]
# test data
test_data <- diseaseInfo_matrix[-(1:train_len),]
test_lables <- diseaseLabels[-(1:train_len),]
########## converting data into dmatrix ######
dtrain <- xgb.DMatrix(data=train_data, label = train_lables)
dtest <- xgb.DMatrix(data=test_data, label=test_lables)
########## Model Training ##########
model <- xgboost(data=dtrain,
nround=2,
objective = 'binary:logistic')
# so both models have same error, that means our second model is not an improvement on our 1st model
########## checking performance for test data ####
pred <- predict(model,dtest)
# get & print the classification error
err <- mean((pred > 0.5) != test_lables)
print(paste("test-error=", err))
model <- xgboost(data=dtrain,
max.depth=3,
nrounds=2,
objective="binary:logistic")
pred <- predict(model, dtest)
err <- mean((pred >0.5) != test_lables)
print(paste("test-error",err))
negative_cases=sum(diseaseLabels == FALSE)
positive_cases=sum(diseaseLabels == TRUE)
model_tuned <- xgboost(data=dtrain,
nrounds = 10,
max.depth=3,
early_stopping_rounds = 3,
objective="binary:logistic",
scale_pos_weight= negative_cases/positive_cases,
gamma=1
)
model <- xgboost(data=dtrain,
max.depth=3,
nrounds=2,
objective="binary:logistic")
model_tuned <- xgboost(data = dtrain, # the data
max.depth = 3, # the maximum depth of each decision tree
nround = 10, # number of boosting rounds
early_stopping_rounds = 3, # if we dont see an improvement in this many rounds, stop
objective = "binary:logistic", # the objective function
scale_pos_weight = negative_cases/postive_cases, # control for imbalanced classes
gamma = 1) # add a regularization term
model_tuned <- xgboost(data = dtrain, # the data
max.depth = 3, # the maximum depth of each decision tree
nround = 10, # number of boosting rounds
early_stopping_rounds = 3, # if we dont see an improvement in this many rounds, stop
objective = "binary:logistic", # the objective function
scale_pos_weight = negative_cases/positive_cases, # control for imbalanced classes
gamma = 1) # add a regularization term
pred <- predict(model_tuned,dtest)
print(paste("test error after tuning :", err))
xgb.plot.multi.trees(feature_names = names(diseaseInfo_matrix),
model = model)
model_tuned <- xgboost(data = dtrain, # the data
max.depth = 3, # the maximum depth of each decision tree
nround = 10, # number of boosting rounds
early_stopping_rounds = 3, # if we dont see an improvement in this many rounds, stop
objective = "binary:logistic", # the objective function
scale_pos_weight = negative_cases/positive_cases, # control for imbalanced classes
gamma = 1) # add a regularization term
xgb.plot.multi.trees(feature_names = names(diseaseInfo_matrix),
model = model)
packages = c("xgboost","tidyverse","DiagrammeR")
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
xgb.plot.multi.trees(feature_names = names(diseaseInfo_matrix),
model = model)
names(diseaseInfo_matrix)
View(diseaseInfo_matrix)
names(diseaseInfo)
names(diseaseInfo_matrix)
names(diseaseInfo_numeric)
?names
names(islands)
names(diseaseInfo_matrix)
str(diseaseInfo_matrix)
xgb.plot.multi.trees(feature_names = names(diseaseInfo_numeric),
model = model)
xgb.plot.multi.trees(feature_names = names(diseaseInfo_numeric),
model = model_tuned)
importance_matrix <- xgb.importance(names(diseaseInfo_matrix), model = model)
xgb.plot.importance(importance_matrix)
importance_matrix <- xgb.importance(names(diseaseInfo_numeric), model = model)
xgb.plot.importance(importance_matrix)
View(diseaseInfo_numeric)
species
region
head(region)
package.check <- lapply(packages, FUN = function(pkg) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
}
})
diseaseInfo <-read.csv("Outbreak_240817.csv")
set.seed(1234)
diseaseInfo <- diseaseInfo[sample(1:nrow(diseaseInfo)),]
diseaseInfo_humansRemoved <- diseaseInfo %>%
select(-starts_with("human"))
diseaseLabels <- diseaseInfo %>%
select(humansAffected) %>%  # to get column with # of humans affected
is.na() %>% # check if na
magrittr::not() # reverse the result of is.na, ie: false means: humans are affected but i need to change it to True.
diseaseInfo_numeric <- diseaseInfo_humansRemoved %>%
select(-Id) %>%
select(-c(longitude,latitude)) %>%
select_if(is.numeric)
region <- model.matrix(~country-1,diseaseInfo)
head(region)
summary(diseaseInfo$speciesDescription)
diseaseInfo_numeric$is_domestic <- str_detect(diseaseInfo$speciesDescription,"domestic")
View(diseaseInfo_numeric)
diseaseInfo_numeric$is_domestic <- as.numeric(str_detect(diseaseInfo$speciesDescription,"domestic"))
speciesList <-   diseaseInfo$speciesDescription %>%
str_replace("[[:punct:]]","") %>% # replacing any punctuation
str_extract("[a-z]*$") # getting just the last word
speciesList <- tibble(species = speciesList) # converting into dataframe
options(na.action = 'na.pass') # dont ignore na
species <- model.matrix(~species-1,speciesList)
species
head(species)
species <- model.matrix(~(species-1),speciesList)
head(species)
diseaseInfo$speciesDescription[1934,]
diseaseInfo$speciesDescription[1934]
View(diseaseInfo_humansRemoved)
diseaseInfo_numeric$speciesDescription[1934]
diseaseInfo_numeric <- cbind(diseaseInfo_numeric,region,species)
View(diseaseInfo_numeric)
names(species)
names(region)
speciesList <-   diseaseInfo$speciesDescription %>%
str_replace("[[:punct:]]","") %>% # replacing any punctuation
str_extract("[a-z]*$") # getting just the last word
speciesList
speciesList <- tibble(species = speciesList) # converting into dataframe
speciesList
?na.action
options(na.action = 'na.omit') # dont ignore na
speciesList <-   diseaseInfo$speciesDescription %>%
str_replace("[[:punct:]]","") %>% # replacing any punctuation
str_extract("[a-z]*$") # getting just the last word
speciesList <- tibble(species = speciesList) # converting into dataframe
speciesList
options(na.action = 'na.pass') # dont ignore na
species <- model.matrix(~(species-1),speciesList)
View(species)
head(species)
diseaseInfo_numeric <- cbind(diseaseInfo_numeric,region,species)
View(diseaseInfo_numeric)
speciesList <- diseaseInfo$speciesDescription %>%
str_replace("[[:punct:]]", "") %>% # remove punctuation (some rows have parentheses)
str_extract("[a-z]*$") # extract the least word in each row
speciesList <- tibble(species = speciesList)
options(na.action='na.pass') # don't drop NA values!
species <- model.matrix(~species-1,speciesList)
diseaseInfo_numeric <- cbind(diseaseInfo_numeric,region,species)
View(diseaseInfo_numeric)
diseaseInfo_matrix <- data.matrix(diseaseInfo_numeric)
train_len <- round(nrow(diseaseInfo_matrix)*0.7)
train_data <- diseaseInfo_matrix[1:train_len,]
train_lables <- diseaseLabels[1:train_len,]
test_data <- diseaseInfo_matrix[-(1:train_len),]
test_lables <- diseaseLabels[-(1:train_len),]
dtrain <- xgb.DMatrix(data=train_data, label = train_lables)
dtest <- xgb.DMatrix(data=test_data, label=test_lables)
model <- xgboost(data=dtrain,
nround=2,
objective = 'binary:logistic')
pred <- predict(model,dtest)
err <- mean((pred > 0.5) != test_lables)
print(paste("test-error=", err))
model <- xgboost(data=dtrain,
max.depth=3,
nrounds=2,
objective="binary:logistic")
pred <- predict(model, dtest)
err <- mean((pred >0.5) != test_lables)
print(paste("test-error",err))
negative_cases=sum(diseaseLabels == FALSE)
positive_cases=sum(diseaseLabels == TRUE)
model_tuned <- xgboost(data = dtrain, # the data
max.depth = 3, # the maximum depth of each decision tree
nround = 10, # number of boosting rounds
early_stopping_rounds = 3, # if we dont see an improvement in this many rounds, stop
objective = "binary:logistic", # the objective function
scale_pos_weight = negative_cases/positive_cases, # control for imbalanced classes
gamma = 1) # add a regularization term
pred <- predict(model_tuned,dtest)
err <- mean((pred>0.5) != test_lables)
print(paste("test error after tuning :", err))
xgb.plot.multi.trees(feature_names = names(diseaseInfo_numeric),
model = model_tuned)
View(diseaseInfo_numeric)
names(diseaseInfo_numeric)
View(diseaseInfo_matrix)
xgb.plot.importance(importance_matrix)
View(importance_matrix)
head(region)
species
names(region)
names(species)
names(diseaseInfo_numeric)
names(region
)
View(species)
colnames(region
)
typeof(region
)
str(region
)
class(region
)
model <- xgboost(data=dtrain,
nround=2,
objective = 'binary:logistic')
